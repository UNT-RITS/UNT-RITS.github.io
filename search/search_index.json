{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"COVID-19 Response Update Due to UNT\u2019s response to the COVID-19 outbreak, Research IT Services, HPC and DSA, are offering only online services during this time. Walk-in and in-person appointments are available through appointments via Zoom, phone, or other means of online communication. Please send an email to hpc-admin@unt.edu to schedule an appointment with a RITS staff member. Thank you for your understanding. Welcome to the High Performance Computing (HPC) documentation of the University of North Texas \u00b6 Recent Updates Tensorflow 2.1 is now available for both CPU and GPU. Use: module load tensorflow/2.1.0-gpu Dedicated module for the transformers library State-of-the-art Natural Language Processing for Pytorch and TensorFlow 2.0 . Currently tested mostly with PyTorch. Use: module load transformers About this documentaiton \u00b6 The purpose of this documentation is to be an add-on to the current official documentation available on our main website: https://hpc.unt.edu . What is UNT HPC? \u00b6 UNT HPC is a part of Research IT Services, offering state-of-the-art computing, storage, visualization, and networking service to the University of North Texas. We help researchers and other members of UNT use advance computing power to enable higher research throughput and expand research capabilities. Our services include the following: Maintaining HPC allocations and resources for UNT researchers and UNT courses Consultation services in performance research on HPC Community training and outreach including workshops and HPC tutorials Providing end-user HPC support Exploring grant opportunities for HPC related projects Acknowledging Talon \u00b6 Please acknowledge the support of the High-Performance Computing services in all publications with the following statement: \u201cComputational resources were provided by the University of North Texas High-Performance Computing Services, a division of the Research IT Services, University Information Technology, with additional support from UNT Office of Research and Economic Development.\u201d Alternatively, a short version will suffice: \u201cComputational resources were provided by UNT office of High-Performance Computing.\u201d Make sure you check out \u00b6 Usage Policy Operational Guidelines","title":"About"},{"location":"#welcome-to-the-high-performance-computing-hpc-documentation-of-the-university-of-north-texas","text":"Recent Updates Tensorflow 2.1 is now available for both CPU and GPU. Use: module load tensorflow/2.1.0-gpu Dedicated module for the transformers library State-of-the-art Natural Language Processing for Pytorch and TensorFlow 2.0 . Currently tested mostly with PyTorch. Use: module load transformers","title":"Welcome to the High Performance Computing (HPC) documentation of the University of North Texas"},{"location":"#about-this-documentaiton","text":"The purpose of this documentation is to be an add-on to the current official documentation available on our main website: https://hpc.unt.edu .","title":"About this documentaiton"},{"location":"#what-is-unt-hpc","text":"UNT HPC is a part of Research IT Services, offering state-of-the-art computing, storage, visualization, and networking service to the University of North Texas. We help researchers and other members of UNT use advance computing power to enable higher research throughput and expand research capabilities. Our services include the following: Maintaining HPC allocations and resources for UNT researchers and UNT courses Consultation services in performance research on HPC Community training and outreach including workshops and HPC tutorials Providing end-user HPC support Exploring grant opportunities for HPC related projects","title":"What is UNT HPC?"},{"location":"#acknowledging-talon","text":"Please acknowledge the support of the High-Performance Computing services in all publications with the following statement: \u201cComputational resources were provided by the University of North Texas High-Performance Computing Services, a division of the Research IT Services, University Information Technology, with additional support from UNT Office of Research and Economic Development.\u201d Alternatively, a short version will suffice: \u201cComputational resources were provided by UNT office of High-Performance Computing.\u201d","title":"Acknowledging Talon"},{"location":"#make-sure-you-check-out","text":"Usage Policy Operational Guidelines","title":"Make sure you check out"},{"location":"details/","text":"Talon Hight-Performance Computing \u00b6 Terminology \u00b6 We refer to the same thing when we say: Talon , HPC , Talon3 (refering to the version of Talon), Cluster , High-Performance Computing , Server . Compute Node \u00b6 Login Node \u00b6 Vis Node \u00b6 GPU Node \u00b6 Job \u00b6 Batch / batch job \u00b6 Session \u00b6 Interractive \u00b6 Module/s \u00b6","title":"Details"},{"location":"details/#talon-hight-performance-computing","text":"","title":"Talon Hight-Performance Computing"},{"location":"details/#terminology","text":"We refer to the same thing when we say: Talon , HPC , Talon3 (refering to the version of Talon), Cluster , High-Performance Computing , Server .","title":"Terminology"},{"location":"details/#compute-node","text":"","title":"Compute Node"},{"location":"details/#login-node","text":"","title":"Login Node"},{"location":"details/#vis-node","text":"","title":"Vis Node"},{"location":"details/#gpu-node","text":"","title":"GPU Node"},{"location":"details/#job","text":"","title":"Job"},{"location":"details/#batch-batch-job","text":"","title":"Batch / batch job"},{"location":"details/#session","text":"","title":"Session"},{"location":"details/#interractive","text":"","title":"Interractive"},{"location":"details/#modules","text":"","title":"Module/s"},{"location":"python/","text":"How to start with Python on Talon HPC \u00b6","title":"Python"},{"location":"python/#how-to-start-with-python-on-talon-hpc","text":"","title":"How to start with Python on Talon HPC"},{"location":"r/","text":"How to start with R on Talon HPC \u00b6","title":"R"},{"location":"r/#how-to-start-with-r-on-talon-hpc","text":"","title":"How to start with R on Talon HPC"},{"location":"stuff/","text":"Welcome to Talon Hight-Performance Computing Documentation \u00b6 BTW this is mobile friendly and easy to deploy on GitHub Pages http://UNT-RITS.github.io/talon_sop/_build/html/index.html Task List \u00b6 Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi Bundle code together \u00b6 Bash #!/bin/bash echo \"Hello world!\" C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } C# using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello world!\" ); } } Python Starter \u00b6 Content \u00b6 1 2 3 4 import tensorflow as tf import os print ( \"Hello world\" ) 1 2 3 4 import tensorflow as tf import os print ( \"Hello world\" ) Formulas \u00b6 \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \u2013 we can use Material Design icons \u2013 we can also use FontAwesome icons \u2013 that\u2019s not all, we can also use GitHub\u2019s Octicons Foot Note \u00b6 Lorem ipsum 1 dolor sit amet R Starter \u00b6 Content \u00b6 Job Submit \u00b6 Content \u00b6 Tables \u00b6 Fruit List Apple Banana Kiwi Fruit Table Fruit Color Apple Red Banana Yellow Kiwi Green Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Welcome to Talon Hight-Performance Computing Documentation"},{"location":"stuff/#welcome-to-talon-hight-performance-computing-documentation","text":"BTW this is mobile friendly and easy to deploy on GitHub Pages http://UNT-RITS.github.io/talon_sop/_build/html/index.html","title":"Welcome to Talon Hight-Performance Computing Documentation"},{"location":"stuff/#task-list","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit Nulla lobortis egestas semper Curabitur elit nibh, euismod et ullamcorper at, iaculis feugiat est Vestibulum convallis sit amet nisi a tincidunt In hac habitasse platea dictumst In scelerisque nibh non dolor mollis congue sed et metus Sed egestas felis quis elit dapibus, ac aliquet turpis mattis Praesent sed risus massa Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque Nulla vel eros venenatis, imperdiet enim id, faucibus nisi","title":"Task List"},{"location":"stuff/#bundle-code-together","text":"Bash #!/bin/bash echo \"Hello world!\" C #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; } C# using System ; class Program { static void Main ( string [] args ) { Console . WriteLine ( \"Hello world!\" ); } }","title":"Bundle code together"},{"location":"stuff/#python-starter","text":"","title":"Python Starter"},{"location":"stuff/#content","text":"1 2 3 4 import tensorflow as tf import os print ( \"Hello world\" ) 1 2 3 4 import tensorflow as tf import os print ( \"Hello world\" )","title":"Content"},{"location":"stuff/#formulas","text":"\\frac{n!}{k!(n-k)!} = \\binom{n}{k} \\frac{n!}{k!(n-k)!} = \\binom{n}{k} \u2013 we can use Material Design icons \u2013 we can also use FontAwesome icons \u2013 that\u2019s not all, we can also use GitHub\u2019s Octicons","title":"Formulas"},{"location":"stuff/#foot-note","text":"Lorem ipsum 1 dolor sit amet","title":"Foot Note"},{"location":"stuff/#r-starter","text":"","title":"R Starter"},{"location":"stuff/#content_1","text":"","title":"Content"},{"location":"stuff/#job-submit","text":"","title":"Job Submit"},{"location":"stuff/#content_2","text":"","title":"Content"},{"location":"stuff/#tables","text":"Fruit List Apple Banana Kiwi Fruit Table Fruit Color Apple Red Banana Yellow Kiwi Green Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. \u21a9","title":"Tables"},{"location":"tutorials/","text":"Tutorials for Talon HPC \u00b6","title":"Tutorials"},{"location":"tutorials/#tutorials-for-talon-hpc","text":"","title":"Tutorials for Talon HPC"},{"location":"user_guide/getting_started/","text":"Get started on Talon \u00b6 How to run a short .py code on HPC (Talon 3) \u00b6 For Mac OS/Linux Ubuntu \u00b6 1. Request an HPC account: \u00b6 If you already have one, you are good to go; If you don\u2019t have one, please visit https://hpc.unt.edu/account-request ; Read carefully and make sure you have all information requested: When you are ready, go to https://hpc.unt.edu/user ; Login in with your EUID (6 characters: initials+4 digits); Fill in the form and wait for our email. Make sure you are connected to the UNT VPN: Instructions can be found here https://itservices.cas.unt.edu/services/accounts-servers/articles/cisco-anyconnect-mobility-client-vpn 2. Open terminal/command prompt \u00b6 3. Login to your HPC account by typing: ssh youraccount@talon3.hpc.unt.edu , press Enter and you\u2019ll be asked to insert password as bellow: \u00b6 4. Fill in with your password, hit Enter and you are in! \u00b6 5. Environment setup \u00b6 Before running any kind of code, you need to make sure you have the right environment set up. For this, type \u201cmodule avail\u201d and press Enter. This will give you something like in the following picture where you can check all modules that are available on HPC. 6. Lookup module \u00b6 Look for the module you need. Let\u2019s say you want to run your code using Python 3.6.5. I will type: module load python/3.6.5 because that\u2019s the name in the list of modules available (see the bottom of the picture above) 7. Upload file to Talon \u00b6 Now that it\u2019s all set up you only need to upload your file containing the python code 8. Access user folder \u00b6 You need to access your user folder from HPC. To do that type in: cd /storage/scratch2/youraccount press Enter Hint: if you want to check what subfolders or files you have here you can type ll (small L\u2019s) 9. Create project folder \u00b6 I will create a folder for this project I want to run just to be organized mkdir functions you can replace word functions with the desired name for your folder Hint: avoid spaces, don\u2019t give names like \u201cProject 1\u201d, instead you can say \u201cProject_1\u201d after creating the folder I used the ll or ls command to check my files and folders from where I am at the moment 10. Access your new folder \u00b6 Access your new folder where the magic will happen: cd functions/ 11. Copy local to HPC \u00b6 Now, you want to copy your .py file from local computer on talon in the new folder created. For this, open a new terminal window without closing this one. Use the command cd to access the path of the file you want to transfer. For example: cd Downloads/ But, if you are not sure where you are at you can type \u201cls\u201d first: I know my file is in Downloads folder so I\u2019ll go there by typing \u201ccd Downloads/\u201d I used again the \u201cls\u201d command to see all the files in the folder, but what I am interested in is functions_comparison.py Now, to transfer this file I\u2019ll do the following: scp functions_comparison.py lp0348@talon3.hpc.unt.edu :/storage/scratch2/lp0348/functions Notice the command is: scp filename youraccount@talon3.hpc.unt.edu :/the/folder/path/on/talon After introducing your HPC account password you should see something like: Notice there\u2019s a percentage indicating the transfer progress Go back to the previous terminal window you were working on. You can check if the file was transferred: Here it is! Step 12. Time to create a batch file What is a batch file? \u2013 It is a script containing code running details related to resources you want to allocate from HPC. Detailed specifications on each line you can find here: https://github.com/gmihaila/unt_hpc/tree/master/job_batch For our example we will use a basic configuration. #!/bin/bash #SBATCH -J job_name #SBATCH -o output_job.o%j ## <- can be left like that (creates a file with the output) #SBATCH -e error_job.e%j. ## <- can be left like that (creates a file with the errors occurred) #SBATCH -p public #SBATCH --qos general #SBATCH -N 1 #SBATCH -n 1 #SBATCH -C c6320 module load python python test.py ## <- name of the .py code file We need to create a file .job where you put the above information. In this tutorial we will use VIM: The command: vim name_of_your_job.job After running this line you should see: This automatically created the batch file .job and opened it. In order to insert the content we discussed above, first hit \u201ci\u201d button from the keyboard. Notice the bottom changed to \u201c\u2014INSERT\u2014\u201d Now, you can type each line from scratch or you can paste it directly. But, if you are using Linux Ctrl+Shift+V would be the command to paste some content; if you are using Mac Command+V as usual will do the work. It might be easier for the beginning to write the batch content elsewhere and then just copy-paste the final commands. To save and quit the batch file: press \u201cEsc\u201d then type \u201c:wq\u201d Now \u201cEnter\u201d and will bring you back to the folder. 13. Run the job! \u00b6 The command line is: sbatch job_name.job You\u2019d probably get the message: It\u2019s done! You submitted a job that runs the py code on HPC. If you want to check your jobs you can use the command: squeue -u your_account If all your jobs are done already then squeue -u your_account command will give you the above output. From Windows \u00b6","title":"Getting Started"},{"location":"user_guide/getting_started/#get-started-on-talon","text":"","title":"Get started on Talon"},{"location":"user_guide/getting_started/#how-to-run-a-short-py-code-on-hpc-talon-3","text":"","title":"How to run a short .py code on HPC (Talon 3)"},{"location":"user_guide/getting_started/#for-mac-oslinux-ubuntu","text":"","title":"For  Mac OS/Linux Ubuntu"},{"location":"user_guide/getting_started/#1-request-an-hpc-account","text":"If you already have one, you are good to go; If you don\u2019t have one, please visit https://hpc.unt.edu/account-request ; Read carefully and make sure you have all information requested: When you are ready, go to https://hpc.unt.edu/user ; Login in with your EUID (6 characters: initials+4 digits); Fill in the form and wait for our email. Make sure you are connected to the UNT VPN: Instructions can be found here https://itservices.cas.unt.edu/services/accounts-servers/articles/cisco-anyconnect-mobility-client-vpn","title":"1. Request an HPC account:"},{"location":"user_guide/getting_started/#2-open-terminalcommand-prompt","text":"","title":"2. Open terminal/command prompt"},{"location":"user_guide/getting_started/#3-login-to-your-hpc-account-by-typing-ssh-youraccounttalon3hpcuntedu-press-enter-and-youll-be-asked-to-insert-password-as-bellow","text":"","title":"3. Login to your HPC account by typing: ssh youraccount@talon3.hpc.unt.edu, press Enter and you\u2019ll be asked to insert password as bellow:"},{"location":"user_guide/getting_started/#4-fill-in-with-your-password-hit-enter-and-you-are-in","text":"","title":"4. Fill in with your password, hit Enter and you are in!"},{"location":"user_guide/getting_started/#5-environment-setup","text":"Before running any kind of code, you need to make sure you have the right environment set up. For this, type \u201cmodule avail\u201d and press Enter. This will give you something like in the following picture where you can check all modules that are available on HPC.","title":"5. Environment setup"},{"location":"user_guide/getting_started/#6-lookup-module","text":"Look for the module you need. Let\u2019s say you want to run your code using Python 3.6.5. I will type: module load python/3.6.5 because that\u2019s the name in the list of modules available (see the bottom of the picture above)","title":"6. Lookup module"},{"location":"user_guide/getting_started/#7-upload-file-to-talon","text":"Now that it\u2019s all set up you only need to upload your file containing the python code","title":"7. Upload file to Talon"},{"location":"user_guide/getting_started/#8-access-user-folder","text":"You need to access your user folder from HPC. To do that type in: cd /storage/scratch2/youraccount press Enter Hint: if you want to check what subfolders or files you have here you can type ll (small L\u2019s)","title":"8. Access user folder"},{"location":"user_guide/getting_started/#9-create-project-folder","text":"I will create a folder for this project I want to run just to be organized mkdir functions you can replace word functions with the desired name for your folder Hint: avoid spaces, don\u2019t give names like \u201cProject 1\u201d, instead you can say \u201cProject_1\u201d after creating the folder I used the ll or ls command to check my files and folders from where I am at the moment","title":"9. Create project folder"},{"location":"user_guide/getting_started/#10-access-your-new-folder","text":"Access your new folder where the magic will happen: cd functions/","title":"10. Access your new folder"},{"location":"user_guide/getting_started/#11-copy-local-to-hpc","text":"Now, you want to copy your .py file from local computer on talon in the new folder created. For this, open a new terminal window without closing this one. Use the command cd to access the path of the file you want to transfer. For example: cd Downloads/ But, if you are not sure where you are at you can type \u201cls\u201d first: I know my file is in Downloads folder so I\u2019ll go there by typing \u201ccd Downloads/\u201d I used again the \u201cls\u201d command to see all the files in the folder, but what I am interested in is functions_comparison.py Now, to transfer this file I\u2019ll do the following: scp functions_comparison.py lp0348@talon3.hpc.unt.edu :/storage/scratch2/lp0348/functions Notice the command is: scp filename youraccount@talon3.hpc.unt.edu :/the/folder/path/on/talon After introducing your HPC account password you should see something like: Notice there\u2019s a percentage indicating the transfer progress Go back to the previous terminal window you were working on. You can check if the file was transferred: Here it is! Step 12. Time to create a batch file What is a batch file? \u2013 It is a script containing code running details related to resources you want to allocate from HPC. Detailed specifications on each line you can find here: https://github.com/gmihaila/unt_hpc/tree/master/job_batch For our example we will use a basic configuration. #!/bin/bash #SBATCH -J job_name #SBATCH -o output_job.o%j ## <- can be left like that (creates a file with the output) #SBATCH -e error_job.e%j. ## <- can be left like that (creates a file with the errors occurred) #SBATCH -p public #SBATCH --qos general #SBATCH -N 1 #SBATCH -n 1 #SBATCH -C c6320 module load python python test.py ## <- name of the .py code file We need to create a file .job where you put the above information. In this tutorial we will use VIM: The command: vim name_of_your_job.job After running this line you should see: This automatically created the batch file .job and opened it. In order to insert the content we discussed above, first hit \u201ci\u201d button from the keyboard. Notice the bottom changed to \u201c\u2014INSERT\u2014\u201d Now, you can type each line from scratch or you can paste it directly. But, if you are using Linux Ctrl+Shift+V would be the command to paste some content; if you are using Mac Command+V as usual will do the work. It might be easier for the beginning to write the batch content elsewhere and then just copy-paste the final commands. To save and quit the batch file: press \u201cEsc\u201d then type \u201c:wq\u201d Now \u201cEnter\u201d and will bring you back to the folder.","title":"11. Copy local to HPC"},{"location":"user_guide/getting_started/#13-run-the-job","text":"The command line is: sbatch job_name.job You\u2019d probably get the message: It\u2019s done! You submitted a job that runs the py code on HPC. If you want to check your jobs you can use the command: squeue -u your_account If all your jobs are done already then squeue -u your_account command will give you the above output.","title":"13. Run the job!"},{"location":"user_guide/getting_started/#from-windows","text":"","title":"From Windows"}]}